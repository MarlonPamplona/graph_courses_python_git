## Conditional formatting

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
import plotly.express as px
```
## Replace

```{python}
# tips data set day
tips = px.data.tips()
tips['day'].unique()
```

```{python}
# Create dictionary that maps to abbreviated day

day_mapping = {
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
}
```


```{python}
# Use replace
tips['day_full'] = tips['day'].replace(day_mapping)
tips
```


```{python}
# Replace without defining dictionary

tips['day_full'] = tips['day'].replace({
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Fri": "Friday",
    "Thur": "Thursday"
})
tips[['day', 'day_full']].head()
```

## Practice Q: Abbreviate Sex

```{python}
tips['sex_abbr'] = tips['sex'].replace({
    "Female": "F",
    "Male": "M"
})
tips[['sex', 'sex_abbr']].head()
```
## Handling missing values with replace()
Datasets may contain missing values (NaN or none) that you may want to replace with placeholders or a specific value.

```{python}
movies = vd.data.movies()
movies['Creative_Type'].value_counts(dropna=False)
```


```{python}
# Replace None with "Unknown/Clear"
movies['Creative_Type'] = movies['Creative_Type'].replace({
    None: "Unknown/Unclear", # 👈 On this line, None is the key
})

movies['Creative_Type'].value_counts(dropna=False)
```

While None is typically used to represent missing strings, NaN is used for missing numbers.

```{python}

# Check the number of missing values
movies.query("US_DVD_Sales.isna()").shape 


# View the last 10 values. Some are missing.
movies['US_DVD_Sales'].tail(10) 

```


```{python}
# Replace NaN with 0
movies['US_DVD_Sales'] = movies['US_DVD_Sales'].replace({
    np.nan: 0 # 👈 `NaN` is represented by `np.nan` in pandas
})

movies['US_DVD_Sales'].tail(10)

movies.query("US_DVD_Sales.isna()").shape
```

## Practice Q: Standardize MPAA RAtings

In the movies dataset, the MPAA_Rating column contains movie ratings. Some entries are None or "Not Rated". Replace both None and "Not Rated" with "Unrated".


```{python}
movies['MPAA_Rating'] = movies['MPAA_Rating'].replace({
    None: "Unrated",
    "Not Rated": "Unrated"
})

movies['MPAA_Rating'].value_counts()
```

## Categorizing Numeric Data with Custom Functions
For example, we can categorize the US_Gross column into three categories based on the following criteria:

If the value is less than 10 million, the category is "Low".
If the value is between 10 million and 50 million, the category is "Medium".
If the value is greater than 50 million, the category is "High".

```{python}
def categ_gross(gross):
    if gross < 10000000:
        return "Low"
    elif gross >= 10000000 and gross <= 50000000:
        return "Medium"
    elif gross > 50000000:
        return "High"
    else:
        return None 


categ_gross_vec = np.vectorize(categ_gross)
```


```{python}
#The np.vectorize function in the above case will return None as a string. To enforce the None type, you can use the otypes parameter:
categ_gross_vec = np.vectorize(categ_gross, otypes=[object])
```


```{python}
movies['Gross_Category'] = categ_gross_vec(movies['US_Gross'])
movies['Gross_Category'].value_counts(dropna=False)
```

## Complex Transformations with Custom Functions

For example, suppose we want to flag superhero movies as “US action movie” or “Global action movie” based on their US and worldwide gross earnings.

For Super Hero movies, if the US gross and worldwide gross are the same (indicating sales were only in the US), the movie is flagged as a US action movie.
For Super Hero movies, if the worldwide gross is greater than the US gross, the movie is flagged as a global action movie.
For all other movies, we leave the flag blank


```{python}
# Define the function to flag movies based on the conditions
def flag_movie(movie_type, us, worldwide):
    if movie_type == 'Super Hero' and us == worldwide:
        return 'US action movie'
    elif movie_type == 'Super Hero' and worldwide > us:
        return 'Global action movie'
    else:
        return None
```


```{python}
print(flag_movie(movie_type='Super Hero', us=100, worldwide=100))
print(flag_movie(movie_type='Super Hero', us=100, worldwide=200))
print(flag_movie(movie_type='Comedy', us=100, worldwide=100))
```


```{python}
flag_movie_vec = np.vectorize(flag_movie)

movies['Action_Flag'] = flag_movie_vec(movies['Creative_Type'], movies['US_Gross'], movies['Worldwide_Gross'])

movies['Action_Flag'].value_counts(dropna=False)
```

## Practice Q: Flag Movies Based on Ratings

In the movies dataset, flag movies as Critic-friendly or Commercial based on their Rotten Tomatoes and IMDB ratings.

If the Rotten Tomatoes rating is above 70% and the IMDB rating is below 5, the movie is flagged as Critic-friendly.
If the Rotten Tomatoes rating is below 50% and the IMDB rating is above 7, the movie is flagged as Commercial.
Otherwise, the movie is categorized as Other.
Count how many movies are Critic-friendly and Commercial. There should be 13 Critic-friendly movies and 33 Commercial movies. Do you recognize any of them?

```{python}
#define function
def flag_movie(Rotten_Tomatoes_Rating, IMDB_Rating):
    if Rotten_Tomatoes_Rating > 70 and IMDB_Rating < 5:
        return 'Critic-friendly'
    elif Rotten_Tomatoes_Rating < 50 and IMDB_Rating > 7:
        return 'Commercial'
    else:
        return 'Other'
```

```{python}
flag_movie_vec = np.vectorize(flag_movie)

movies['Action_Flag'] = flag_movie_vec(movies['Rotten_Tomatoes_Rating'], movies['IMDB_Rating'])

movies['Action_Flag'].value_counts(dropna=False)
```

