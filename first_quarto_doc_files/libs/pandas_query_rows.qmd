
# Imports


```{python}
import pandas as pd
```


```{python}
yaounde = pd.read_csv("../data/yaounde_data.csv")
yaounde
```


```{python}
yao = yaounde[["age", "sex", "weight_kg", "neighborhood", "occupation","symptoms", "is_smoker",
"is_pregnant", "igg_result", "igm_result"]]

yao
```

# Introduce query


```{python}
yao.query("sex == 'Male'")
```


```{python}
# Get the number of rows that fulfill the criterion
yao.query("sex == 'Male'").shape[0]

```


```{python}
# queries do not modity the dataframe itself

# create a new object
yao_male = yao.query("sex == 'Male'")

yao_male
```

# Practice Q : Subset for pregnant respondents

Pregnant individuals have the is_pregnant column set to "Yes". Subset just these individuals and store the result in a new data frame called yao_pregnant


```{python}
yao_pregnant = yao.query("is_pregnant == 'Yes'")
yao_pregnant.shape[0]
```

# Relational operators


```{python}
yao.query("sex == 'Male'") # equal to 
yao.query("sex != 'Male'") # not equal to 
yao.query("age > 7") #greater than
yao.query("age >= 7") #greater than or equal to
yao.query("age < 7").shape[0] #less than
yao.query("age <= 7").shape[0] #less than

#isin
yao.query("neighborhood.isin(['Briqueterie','Carriere'])").shape[0]
```

# Practice
From yao, keep only respondents who were children (under 18). Assign the result to a new data frame called yao_children. There should be 291 rows

```{python}
yao_children = yao.query("age < 18")
yao_children.shape[0]
```


With isin(), keep only respondents who live in "Carriere" or "Ekoudou" neighborhooods. Assign the result to a new data frame called yao_carriere_ekoudou. There should be 426 rows


```{python}
yao_carriere_ekoudou = yao.query("neighborhood.isin(['Carriere','Ekoudou'])")

yao_carriere_ekoudou.shape[0]
```

# Accessing external variables


```{python}
min_age = 25

yao.query("age >= @min_age")
```

# Practice Q: Subset for young respondents
From yao, keep respondents who are less than or equal to the variable max_age, defined below. Assign the result to a new DataFrame called yao_young. There should be 590 rows.

```{python}
max_age = 30
yao.query("age <= @max_age")
```

# Combining conditions


```{python}
# age less than 18 or greater than 65
yao.query("age < 18 | age > 65")
```


```{python}
# either pregnant or ex-smokers
yao.query('is_pregnant == "Yes" | is_smoker == "Ex-smoker"')
```


```{python}
# pregnant and ex-smokers
yao.query('is_pregnant == "Yes" & is_smoker == "Ex-smoker"')
```



```{python}
# Get unique values in columns
yao.is_smoker.value_counts()
```

# Practice Q: Subset for IGG positive men

Subset yao to only keep men who tested IgG positive. Assign the result to a new DataFrame called yao_igg_positive_men. There should be 148 rows after your query.


```{python}
yao_igg_positive_men = yao.query('sex == "Male" & igg_result == "Positive"' )

yao_igg_positive_men.shape[0]
```

# Negating conditions wit the ~ operator


```{python}
# return individuals to those not equal to condition
yao.query("~(occupation == 'Student')")
```


```{python}
yao.query("~(age < 18 | weight_kg <30)")
```

# Practice Q : Drop smokers or those above 50


```{python}
yao_dropped = yao.query("~(age > 50 | is_smoker == 'Smoker')")

yao_dropped.shape[0]
```

# NaN values


```{python}
#yao.query("is_pregnant == 'NaN'")
```


```{python}
yao.query("is_pregnant.isna()")
```


```{python}
yao.query("is_pregnant.notna()")
```

# Practice Q: Keep Missing Smoking Status


```{python}
yao.query("is_smoker.isna()")
```

# Querying based on string pattenrs


```{python}
yao.occupation.value_counts()
```


```{python}
# values containing the string student
yao.query("occupation.str.contains('Student')")
```


```{python}
yao.query("~(occupation.str.contains('Student'))")
```


```{python}
yao.query("occupation.str.contains('Student|Farmer')")
```

# Practice Q: Cough and Fever

```{python}
yao.query("symptoms.str.contains('Cough|Fever')")
```