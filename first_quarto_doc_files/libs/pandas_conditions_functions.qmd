
## Importing the packages

```{python}
import pandas as pd
pd.options.display.max_rows = 7
import numpy as np
import vega_datasets as vd

```

## Basics of a Function
# Convert pounds to kilograms

```{python}
def pounds_to_kg(pounds):
    return pounds * 0.4536
```

```{python}
print(pounds_to_kg(150))
```

## Structure of a function

```{python}
#def function_name():  # (argument)
    # Function body # code that we want to execute
```


```{python}
# Use new function in a DataFrame
pounds_df = pd.DataFrame({'pounds': [150, 200, 250]})
pounds_df['kg'] = pounds_to_kg(pounds_df['pounds'])
pounds_df
```

## Practice Q Age in Months function
# Use the riots_df to create a new column called age_months

```{python}
#import the data
riots_df = vd.data.la_riots()
riots_df
```

```{python}
# define function
def years_to_months(age):
    return age * 12
```

```{python}
# create a new column
riots_df['age_months'] = years_to_months(riots_df['age'])

riots_df
```

## Functions with Multiple Arguments

```{python}
def calc_calories(carb_grams, protein_grams, fat_grams):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result

calc_calories(carb_grams=50, protein_grams=25, fat_grams=10)
```


```{python}
# Missing argument
#calc_calories(carb_grams=50, protein_grams=25)
```


```{python}
# using default values if arguments are missing
def calc_calories(carb_grams=0, protein_grams=0, fat_grams=0):
    result = (carb_grams * 4) + (protein_grams * 4) + (fat_grams * 9)
    return result
```


```{python}
calc_calories(carb_grams=50, protein_grams=25)
```


```{python}
food_df = pd.DataFrame({
    'food': ['Apple', 'Avocado'],
    'carb_grams': [25, 10],
    'protein_grams': [0, 1],
    'fat_grams': [0, 14]
})
food_df['calories'] = calc_calories(food_df['carb_grams'], food_df['protein_grams'], food_df['fat_grams'])

food_df
```

## Practice Q: BMI Function
# create a calc_bmi function that calculates the BMI: BMI is weight/(height^2)


```{python}
# define function
def calc_bmi(Weight, Height):
    return round(Weight / (Height**2))

```


```{python}
# run the function
bmi_df = pd.DataFrame({
    'Weight': [70, 80, 100],  # in kg
    'Height': [1.7, 1.8, 1.2]  # in meters
})

bmi_df['BMI'] = calc_bmi(bmi_df['Weight'], bmi_df['Height'])

bmi_df

```

## Intro to Conditiona;s: if, elif and else
# Conditional statements allow you to execute code only when certain conditions are met.

```{.python eval = false}
# Basic Syntax
if condition:
    # Code to execute if condition is True
elif another_condition:
    # Code to execute if the previous condition was False and this condition is True
#lse:
    # Code to execute if all previous conditions were False
```

```{python}
def class_num(num):
    if num > 0:
        return "Positive"
    elif num < 0:
        return "Negative"
    else:
        return "Zero"

print(class_num(10))    # Output: Positive
print(class_num(-5))    # Output: Negative
print(class_num(0))     # Output: Zero
```

```{python}
num_df = pd.DataFrame({'num': [10, -5, 0]})
num_df
```


```{python}
# This wont work because if statements are not built to work on series. You need to vectorize
num_df['category'] = class_num(num_df['num'])
```


```{python}
# Vectorize

class_num_vec = np.vectorize(class_num)
num_df['category'] = class_num_vec(num_df['num'])
num_df
```

```{python}
# Practice 
def categorize_grade(grade):
    if grade >= 85 and grade <= 100:
        return 'Excellent'
    elif grade >= 60 and grade < 85:
        return 'Pass'
    elif grade >= 0 and grade < 60:
        return 'Fail'
    else:
        return 'Invalid grade'

categorize_grade(95)  # Output: Excellent
```

```{python}
# Vectorize
categorize_grade = np.vectorize(categorize_grade)

grades_df = pd.DataFrame({'grade': [95, 82, 76, 65, 58, -5]})
grades_df['grade_cat'] = categorize_grade(grades_df['grade'])
grades_df
```

## Practice Q: Age Categorization
# Now, try writing a function that categorizes age into different life stages as described earlier. You should use the following criteria:

# If the age is under 18, the category is ‘Minor’.
# If the age is greater than or equal to 18 and less than 65, the category is ‘Adult’.
# If the age is greater than or equal to 65, the category is ‘Senior’.
# If the age is negative or invalid, return ‘Invalid age’.


```{python}
# define function
def life_stage(age):
    if age < 18:
        return 'Minor'
    elif age >= 18 and age < 65:
        return 'Adult'
    elif age >= 65:
        return 'Senior'
    else:
        return 'Invalid Age'
# Vectorize
life_stage = np.vectorize(life_stage)
```

```{python}
# Import data
riots_df = vd.data.la_riots()
riots_df
```


```{python}
# Apply function
riots_df['Age_Category'] = life_stage(riots_df['age'])

riots_df
```


```{python}
# Apply vs Vectorize
grades_df['grade_cat'] = grades_df['grade'].apply(categorize_grade)
grades_df
```